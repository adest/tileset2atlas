// Auto-generated from tileset-configure.html.
// DO NOT EDIT.

library x_tileset_configure;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'src/model.dart';
import '../src/tileset/TileSet.dart';
import '../src/textureatlas/textureatlas.dart';



class TilesetConfigure extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-tileset-configure");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
  <div class="page-header">
    <h1>Configure Tileset&nbsp;<small>Choose tile height and width for automatic tileset generation</small></h1>
  </div>
  <!-- form -->
  <div class="row-fluid">
    <form class="form-inline span7">
      <label class="control-label">Tile</label>
      <select class="input-small" disabled="">
        <option>Custom</option>
        <option>32 * 32</option>
        <option>64 * 64</option>
      </select>
      <div class="input-prepend input-append">
        <span class="add-on">Width</span>
        <input class="input-mini" id="tileHeight" type="number">
        <span class="add-on">Px</span>
      </div>
      <div class="input-prepend input-append">
        <span class="add-on">Height</span>
        <input class="input-mini" id="tileWidth" type="number">
        <span class="add-on">Px</span>
      </div>
      <button type="button" class="btn btn-primary">Valid</button>
    </form>
    <div class="span5">
      <label class="inline">Image</label>
      <div class="inline alert alert-info"></div>
      <div class="inline alert alert-info"></div>
    </div>
  </div>
  <!-- sccene -->
  <div class="row-fluid">
    <canvas id="tileset-area">This browser dose not accept canvas!</canvas>
  </div>
''');
  autogenerated.ButtonElement __e13;
  autogenerated.DivElement __e15, __e17;
  autogenerated.InputElement __e11, __e12;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-tileset-configure");
    setScopedCss("x-tileset-configure", new autogenerated.ScopedCssMapper({".inline":"inline",".form-inline":"form-inline","#tileset-area":"tileset-area","x-tileset-configure":"[is=\"x-tileset-configure\"]"}));
    _css = getScopedCss("x-tileset-configure");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e11 = __root.nodes[5].nodes[1].nodes[5].nodes[3];
    __t.listen(__e11.onChange, ($event) { renderTileset(); });
    __t.listen(__e11.onInput, ($event) { tileWidth = __e11.value; });
    __t.oneWayBind(() => tileWidth, (e) { if (__e11.value != e) __e11.value = e; }, false, false);
    __e12 = __root.nodes[5].nodes[1].nodes[7].nodes[3];
    __t.listen(__e12.onChange, ($event) { renderTileset(); });
    __t.listen(__e12.onInput, ($event) { tileHeight = __e12.value; });
    __t.oneWayBind(() => tileHeight, (e) { if (__e12.value != e) __e12.value = e; }, false, false);
    __e13 = __root.nodes[5].nodes[1].nodes[9];
    __t.listen(__e13.onClick, ($event) { buildAtlas(); });
    __e15 = __root.nodes[5].nodes[3].nodes[3];
    var __binding14 = __t.contentBind(() => app.tileset.image.height, false);
    __e15.nodes.addAll([new autogenerated.Text('height: '),
        __binding14]);
    __e17 = __root.nodes[5].nodes[3].nodes[5];
    var __binding16 = __t.contentBind(() => app.tileset.image.width, false);
    __e17.nodes.addAll([new autogenerated.Text('Width: '),
        __binding16]);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e11 = __e12 = __e13 = __e15 = __e17 = null;
  }

  /** Original code from the component. */

  TilesetPreview _tilesetPreview;
  CanvasElement tilesetArea;

  String get tileWidth => app.tileset.tileWidth.toString();
  String get tileHeight => app.tileset.tileHeight.toString();
  set tileWidth(String value) => app.tileset.tileWidth = int.parse(value, onError: (v) {return 0;});
  set tileHeight(String value) => app.tileset.tileHeight = int.parse(value, onError: (v) {return 0;});

  void inserted() {
    tilesetArea = this.query("#tileset-area");
    _tilesetPreview = new TilesetPreview.fromImage(
        app.tileset.image,
        app.tileset.tileWidth,
        app.tileset.tileHeight);
    _detectDefinition();
    renderTileset();
  }

  void renderTileset() {
    if (  app.tileset.image.width % app.tileset.tileWidth == 0 &&
          app.tileset.image.height % app.tileset.tileHeight == 0) {
      _tilesetPreview.tileWidth = app.tileset.tileWidth;
      _tilesetPreview.tileHeight = app.tileset.tileHeight;
      _tilesetPreview.preview(tilesetArea, drawGrid: true, gridStyle: 'red');
    }
  }

  void buildAtlas() {
    app.textureAtlas = new TextureAtlas.fromTileset(
        app.tileset.image,
        app.tileset.tileHeight,
        app.tileset.tileWidth);
    app.currentView = ViewEnum.EXPORT;
  }

  void _detectDefinition() {
    var tileDefinition = null;
    for (int def in [128, 64, 32 , 16, 8]) {
      if (_acceptDefinition(app.tileset.image, def)) {
        tileDefinition = def;
        break;
      }
    }
    if (tileDefinition != null) {
      app.tileset.tileWidth = tileDefinition;
      app.tileset.tileHeight = tileDefinition;
    }
  }

  bool _acceptDefinition(ImageElement img, int definition)
  => img.height % definition == 0 && img.width % definition == 0;
}


//# sourceMappingURL=tileset-configure.dart.map